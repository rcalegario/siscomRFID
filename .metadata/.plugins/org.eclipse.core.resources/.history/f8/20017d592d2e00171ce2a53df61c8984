package simulador;

import java.util.ArrayList;
import java.util.Random;

public class Simulador {
	
	// Entradas
	private String estimador;
	private int qtd_inicial_etiquetas;
	private int incremeto;
	private int max_etiquetas;
	private int repeticao;
	private int quadro_inicial;
	
	// Saidas
	private int[] qtd_etiquetas;
	private int[] total_slots;
	private int[] total_slots_vazio;
	private int[] total_slots_colisao;
	private long[] tempo_simulacao;
	
	public Simulador(String e, int qie, int i, int me, int r, int qi){
		this.estimador = e;
		this.qtd_inicial_etiquetas = qie;
		this.incremeto = i;
		this.max_etiquetas = me;
		this.repeticao = r;
		this.quadro_inicial = qi;
		
		int tan = (this.max_etiquetas/this.incremeto)+1;
		this.qtd_etiquetas = new int[tan];
		for (int j = 0; j < qtd_etiquetas.length; j++) {
			if(j == 0) qtd_etiquetas[j] = 1;
			else qtd_etiquetas[j] = this.incremeto * j;
		}
		this.total_slots = new int[tan];
		this.total_slots_vazio = new int[tan];
		this.total_slots_colisao = new int[tan];
		this.tempo_simulacao = new long[tan];
	}

	private int lowerbound(int colisoes){
		return colisoes * 2;
	}
	
	private int eomlee(double colisoes, double sucessos, double tamanho_quadro){
		double limiar =  0.001;
		double gama_atual = 0;
		double gama_anterior = 2;
		
		do{
			
			double betaK = tamanho_quadro/(gama_anterior*colisoes + sucessos);
			
			double e = Math.exp(-(1/betaK));
			double a = 1 - e;
			double eb = (1 + (1/betaK))*e;
			double b = betaK * (1 - eb);
			gama_atual = a/b;
			
			gama_anterior = gama_atual;
			
		}while(Math.abs(gama_anterior - gama_atual) >= limiar);
		
		return (int) (gama_atual * colisoes);
		
	}
	
	public void simulador(int qtd_etiquetas, int posicao){
		
		long t0 = System.currentTimeMillis();
		
		Random ran = new Random();
		int total_slots = 0;
		int quadro = this.quadro_inicial;
		
		int colisao = 0, sucesso = 0, vazio = 0;
		
		do{
			colisao = 0; sucesso = 0; vazio = 0;
			
			total_slots += quadro;
			
			int[] slots_abertos = new int[quadro];
			for (int i = 0; i < qtd_etiquetas; i++) {
				int n = ran.nextInt(quadro); //slot em que a etiqueta irá responder
				slots_abertos[n]++;
			}
			
			for (int i = 0; i < slots_abertos.length; i++) {
				if(slots_abertos[i] > 1) {
					colisao++;
				} else if(slots_abertos[i] == 1){
					sucesso++;
				} else {
					vazio++;					
				}
			}
			
			// escolha do estimador
			if(colisao > 0){
				switch(this.estimador){
				case("lowerbound"):
					quadro = lowerbound(colisao);
					break;
				case("eom-lee"):
					quadro = eomlee(colisao,sucesso,quadro);
					break;
				}				
			}
			
			qtd_etiquetas -= sucesso;
			
			this.total_slots_vazio[posicao] += vazio;
			this.total_slots_colisao[posicao] += colisao;
			
			//System.out.println("Colisões:\t" + estado[0] + "\tAcertos:\t" + estado[1] + "\tVazio:\t" + estado[2]);
		}while(colisao != 0);
		
		this.total_slots[posicao] += total_slots;
		
		this.tempo_simulacao[posicao] += System.currentTimeMillis()-t0;
	}
	
	public int simuladorQ(double cq, int qtd_etiquetas){
		Random ran = new Random();
		int total_slots_usados = 0, slot_obs;
		double qfp = 4.0, q;
		
		do{
			total_slots_usados++;
			
			q = Math.round(qfp);
			int quadro = (int) Math.pow(2.0, q);
			
			slot_obs = 0;
			for (int i = 0; i < qtd_etiquetas; i++) {
				if(ran.nextInt(quadro) == 0) 
					slot_obs++;
			}
			
			if(slot_obs == 0) 
				qfp = Math.max(0,  qfp-cq);
			else if(slot_obs > 1) 
				qfp = Math.min(15, qfp+cq);
			else
				qtd_etiquetas--;
			
			//System.out.println("slots usado " + total_slots_usados + "\netiquetas obs: " + slot_obs + "\nqfp "+qfp);
			
		}while(qtd_etiquetas > 0);
		
		return total_slots_usados;
	}
	
	public void simulacao(double cp){
			
		for (int i = 0; i < this.qtd_etiquetas.length; i++) {
			
			for (int j = 0; j < this.repeticao; j++) {
				if(cp == 0) 
					simulador(this.qtd_etiquetas[i], i);
				else
					simuladorQ(cp,this.qtd_etiquetas[i]);
			}				
			
			this.total_slots[i] = this.total_slots[i]/this.repeticao;
			this.total_slots_vazio[i] = this.total_slots_vazio[i]/this.repeticao;
			this.total_slots_colisao[i] = this.total_slots_colisao[i]/this.repeticao;
			this.tempo_simulacao[i] = this.tempo_simulacao[i]/this.repeticao;
		}
		
	}
	
}
